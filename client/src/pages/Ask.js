import React, { useState, useEffect, useRef } from 'react';
import { getToken } from '../utils/auth';
import { useMutation } from '@apollo/client';
import { gql } from '@apollo/client/core';
import Navbar from '../components/Navbar';
import SendButtonIcon from '../assets/icons/SendButtonIcon';
import speechProfilePic from '../assets/images/speechProfilePic.webp';
import DownArrow from '../assets/icons/DownArrow';

const OPENAI_QUERY = gql`
  mutation OpenAIQuery($message: String!) {
    openAIQuery(message: $message) {
      response
    }
  }
`;

function Ask() {
    const [message, setMessage] = useState('');
    const [history, setHistory] = useState([]);
    const [errorMsg, setError] = useState('');
    const [openAIQuery] = useMutation(OPENAI_QUERY);
    const [loading, setLoading] = useState(false);
    const [showArrow, setShowArrow] = useState(false);
    const messageEndRef = useRef(null);
  
    useEffect(() => {
      const token = getToken();
      if (!token) {
        window.location.href = '/login';
      }
      window.addEventListener('scroll', handleScroll); // add the event listener here
      return () => {
        window.removeEventListener('scroll', handleScroll); // remove the event listener on unmount
      };
    }, []);

      // check if the view requires scrolling
      const handleScroll = () => {
        const windowHeight = window.innerHeight;
        const bodyHeight = document.body.clientHeight;
        const scrollY = window.scrollY;
        const isBottom = (windowHeight + scrollY) >= (bodyHeight - 10); // 10 is a buffer value
      
        setShowArrow(!isBottom);};

      useEffect(() => {
        if (history.length > 0) {
          messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });
        }
      }, [history]);

      useEffect(() => {
        window.addEventListener("scroll", handleScroll);
        return () => window.removeEventListener("scroll", handleScroll);
      }, []);
      
  
      const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        try {
          const { data } = await openAIQuery({ variables: { message } });
          setHistory((prevHistory) => [...prevHistory, { prompt: message, response: data.openAIQuery.response }]);
          setMessage('');
          document.querySelector(".message-input").innerHTML = "";
          messageEndRef.current.scrollIntoView({ behavior: "smooth" });
        } catch (err) {
          console.log("Error details:", err);
          setError(`Error sending message: ${err.message}`);
        }
        setLoading(false);
      };

    const scrollToBottom = () => {
        window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });
      }
  
    return (
      <div className="App">
        <Navbar />
        <div className='flex justify-center'>
          <p className='text-[#BF4D49] font-semibold md:text-2xl'>ASK ROBBIE</p>
        </div>
        <div className='flex justify-center'>
          <p className='text-[#2B2A64] text-3xl font-bold text-center mb-3 md:text-5xl'>A RES FOR ALL <br className='md:hidden'/>YOUR REQ'S</p>
        </div>
        <div ref={messageEndRef} className="history-container pb-[140px] px-10 md:px-32 lg:px-[15%]">
          {history.map((item, index) => (
            <div key={index}>
              <div className="p-2  text-white text-right bg-[#BF4D49]">{item.prompt}</div>
              <div className='p-2 my-2 text-white bg-[#2A2868] flex'>
                <img className='h-[40px] my-3 ml-2 mr-4' src={speechProfilePic} alt="" />
                <div className="py-2">{item.response}</div>
              </div>
            </div>
          ))}
        </div>
        <form className='bg-[#BF4D49] fixed bottom-0 w-full md:flex md:justify-center' onSubmit={handleSubmit}>
          <div className='flex flex-col bg-[#BF4D49] md:w-4/6'>
            <div className='flex px-2 pt-3 flex-grow'>
              <div className="w-[95%] p-2 rounded-l-lg bg-white resize-none flex-grow outline-none message-input"
                contentEditable={true}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    e.preventDefault();
                    handleSubmit(e);
                  }
                }}
                onInput={(e) => setMessage(e.target.textContent)}>
                    {/* {!message && <div className="placeholder-text text-[#7B7A98]">Send a question...</div>} */}
              </div>
              <button className="flex text-[#7B7A98] bg-white rounded-r-lg justify-center items-center p-1 hover:text-[#BF4D49] " type="submit" disabled={loading}>
                {loading ? <div>AI Robbie Thinking...</div> : <SendButtonIcon className="" />}
              </button>
          </div>
          <p className='text-xs text-white px-4 pt-1 pb-3'>Disclaimer: The answers provided on this page are not genuinely from the presidential candidate Robbie. In reality, the responses are generated by a language model, ChatGPT,</p>
        </div>
      </form>
      {showArrow && (
  <div className="scroll-to-bottom fixed right-1 bottom-36 md:right-12 lg:right-[7.5%]">
    <button className='text-[#2A2868] bg-white rounded-full hover:opacity-75' onClick={scrollToBottom}>
      <DownArrow className=""/>
    </button>
  </div>
)}

    </div>

  );
}

export default Ask;
